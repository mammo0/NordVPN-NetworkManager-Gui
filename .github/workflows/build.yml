name: Build NordVPN-NetworkManager Gui

on:
    push:
        branches: master
        tags:
            - v*

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Install Dependencies
              run: |
                  sudo apt-get install libcap-dev
                  sudo apt-get install -s "python3-pyqt5" \
                      | sed -n \
                          -e "/^Inst python3-pyqt5 /d" \
                          -e 's/^Inst \([^ ]\+\) .*$/\1/p' \
                      | sudo xargs apt-get install
                  sudo pip install pipenv
            - name: Install pyenv
              run: |
                  unset PYENV_ROOT
                  curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
                  echo "PATH=$HOME/.pyenv/bin:$PATH" >> $GITHUB_ENV
                  echo "PYENV_ROOT=$PYENV_ROOT" >> $GITHUB_ENV

            - name: Checkout
              uses: actions/checkout@v2

            - name: Build
              run: |
                  echo $(/lib/x86_64-linux-gnu/libc.so.6 --version)
                  make

            - name: Prepare release
              run: |
                  binary_name=nord_nm_gui
                  binary_file=$(pwd)/bin/$binary_name
                  echo "BINARY_NAME=$binary_name" >> $GITHUB_ENV
                  echo "BINARY_FILE=$binary_file" >> $GITHUB_ENV
                  if [[ $GITHUB_REF == refs/tags/v* ]]; then
                      echo "PRERELEASE=false" >> $GITHUB_ENV
                      echo "RELEASE_NAME=$GITHUB_REF" >> $GITHUB_ENV
                  else
                      echo "PRERELEASE=true" >> $GITHUB_ENV
                      echo "RELEASE_NAME=$(date +'%Y%m%d-%H%M')_$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
                  fi
            - name: Create GH Release
              if: success()
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.RELEASE_NAME }}
                  release_name: NordVPN-NetworkManager Gui ${{ env.RELEASE_NAME }}
                  draft: false
                  prerelease: ${{ env.PRERELEASE }}
            - name: Upload binary
              if: success()
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ env.BINARY_FILE }}
                  asset_name: ${{ env.BINARY_NAME }}
                  asset_content_type: application/octet-stream
